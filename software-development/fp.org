* Functors

- A functor is a data container which provides a map operation. Example:
  ~IEnumerable<T>~
- An endofunctor is a functor which preserves the category. Example: Going from
  ~IEnumerable<int>~ to ~IEnumerable<string>~ preserves the type
  ~IEnumerable<T>~
- A monomorphic functor is a non-generic functor
- Functors preserve the container structure (order). Example:

#+begin_src csharp
var numbers = new[] { 1, 2, 3 };
var biggerNumbers = numbers.Select(n => n + 1);

// Result: { 2, 3, 4 }
#+end_src

Mapping the identity function leaves the functor unchanged:

#+begin_src csharp
var numbers = new[] { 1, 2, 3 };
var firstLaw = numbers.Select(n => n);

Assert.Equal(numbers, firstLaw);
#+end_src

Mapping f followed by mapping g is the same as mapping g(f):

#+begin_src csharp
var numbers = new[] { 1, 2, 3 };

Func<int, int> f = n => n + 1;
Func<int, int> g = n => n + 2;

var first = numbers.Select(f).Select(g);
var second = numbers.Select(n => g(f(n)));
#+end_src

Examples of functors:

- Maybe
- Either
- Tree
- Visitor
- Reactive
- Lazy
- Async
- IO
